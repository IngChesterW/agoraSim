const express = require('express');
const router = express.Router();
const {formatearFechaHora} = require('../../funcAux/funcionesAuxiliares');
const path =require('path');
const fs = require('fs');
const pool = require('../../keys2');
const pool2 = require('../../keys');
const session = require('express-session');



//-------FUNCION PARA LIMITAR POR TIEMPO EL REGISTRO DE LLAMADAS NUEVAS------------->

function salioDelBaneo(fechaControl,fechaGet,min){
    let result= fechaGet - fechaControl ;
    console.log(fechaControl + '--------' + fechaGet);
    let resultado = result / (60*1000);
    console.log(resultado);
    return resultado > min ;
 };



 //-------FUNCION PARA ADICIONAR LLAMADA VERIFICANDO EN DB------------->

async function adicionarVerificarLlamada(info){
    const {doctor,paciente,lugar} = info;
    const fecha = new Date();
    info.fecha = formatearFechaHora(fecha);
   //verificamos que no este duplicado
   let verificar = await pool.query('select * from llamadas where doctor = ?  and paciente = ?  and lugar = ?',[doctor,paciente,lugar]);
   if (verificar[0].length === 0){
      await pool.query('insert into llamadas set ?',[info]);
      console.log('funciona verifica e inserta funcion');
   }else{
      console.log('funciona verifica y no inserta funcion' + doctor + ' ---- ' + paciente );
   };
};


module.exports = (io) => {

//RUTAS NORMALES -------------------------->

  router.get('/pantalla', (req, res) => {
   // const servicio = session.hostName;
    const servicio = 'consultorio';
    console.log('SERVICIO CONECTADO --> ' + servicio);

    if(servicio){
        console.log('entra if');
        switch(servicio){
            case  'consultorio' :
              console.log('entra cons');
              let  consultorio = 1;
                  res.render('../views/index.hbs',{consultorio});
                break;
            case  'imagenologia' :
              console.log('entra imagenologia');
              let  imagenologia = 1;
              res.render('../views/index.hbs',{imagenologia});
                break;
            case 'laboratorio' :
                  let laboratorio = 1;
              res.render('../views/index.hbs',{laboratorio});
              break;
                case 'emergencia' :
                  let emergencia = 1;
              res.render('../views/index.hbs',{emergencia});
              break;
        };
       }else{
         res.send('no se recibio el tipo de servicio');
       };
  });



  router.get('/registroLlamadaGet',async(req,res)=>{
    const {doc,pac,lug} = req.query;
    let fechaGet = Date.now();
    session.fechaGet= fechaGet;
    //console.log(session.fechaGet + '--------' + session.fechaControl);
    let resultado = {};
    let fecha = new Date();
        fecha = formatearFechaHora(fecha);
    let  info = {doctor:doc,paciente:pac,lugar:lug};
            if(session.fechaControl){
                if(session.fechaControl,session.fechaGet){
                session.fechaControl = session.fechaGet;
                adicionarVerificarLlamada(info);
                req.flash('message',info);
                resultado.mensaje = 'la primera llamada fue registrado con exito';
                }else{
                console.log('el doctor ' + doc + ' o el consultorio ' + lug + ' estan baneados todavia');
                resultado.mensaje = 'todavia banido por el tiempo ';
            };
            }else {
              session.fechaControl = session.fechaGet;
              info.fecha = fecha;
              await pool.query('insert into llamadas set ?',[info]);
              resultado.mensaje = ' la llamada se registro correctamente';
            }
        io.emit('nuevaLlamada',info);
    res.send(resultado);
  });




  router.get('/opciones/:opcion', async(req,res)=>{
    const {opcion} = req.params;
    switch (opcion) {
     case  'eliminarLlamadas' :
        await pool.query('delete from llamadas');
       io.emit('sinLlamadas');
           res.send('se eliminaron las llamadas');
        break;
         case  'eliminarMensaje':
       await pool.query('delete from mensajes');
           res.send('se elimino mensajes');
       io.emit('sinMensajes');
     break;
         case 'adicionarMensaje':
       await pool.query(`insert into mensajes(mensaje) values('dasdasdasdasdasdasdasdasdasdasdasd122314')`);
           res.send('adicionado mensaje');
       io.emit('nuevoMensaje');
       };
  });



  //EVENTOS WEBSOCKET---------------------------------------->

  io.on('connection', (socket) => {
    console.log('CONEXION SOCKET PANTALLA RB');

    //evento para listar las llamadas -------------->
    socket.off('listarLlamadas',()=>{});
    socket.on('listarLlamadas',async()=>{
        console.log('lista las llamadas');
        await pool.query('delete from llamadas where UNIX_TIMESTAMP(`fecha`)<(UNIX_TIMESTAMP()-1800)');
            const  listaLlamadas = await pool.query('select * from llamadas ORDER BY codigo_llamada DESC LIMIT 5');
        var llamadas = '';
        if (listaLlamadas[0].length === 0){
                llamadas = 'vacio';
        }else{
        let  maxCodigoLlamada = Math.max(...listaLlamadas[0].map(item => item.codigo_llamada));
            llamadas =  listaLlamadas[0].map((item) =>{
        if(item.codigo_llamada === maxCodigoLlamada){
            item.clase='ultima_caja';

        }else{
            item.clase='caja';

        }
        return item;
    });
    };
        console.log(llamadas);
        io.emit('listaLlamadas',llamadas);
    });


  //evento para mostrar videos cuando no haya llamadas----------->
    var listaVideosVacio = {};
    var  p = 0;
    let videosVacio = path.join(__dirname,'../../public/videos/');
    fs.readdir(videosVacio,(err,files)=>{
        let x = 0;
        files.forEach(file =>{
                console.log('video vacio bucle');
                x = x + 1;
            p = p + 1;
            console.log(file);
            listaVideosVacio[x] = file;
                console.log(listaVideosVacio);
        });
    });
    socket.off('videoVacioId',()=>{});
    socket.on('videoVacioId',(idVidVac)=>{
        console.log('clientes sockets vacio  => ' + io.engine.clientsCount);
        console.log('recibe id video vacio ' + idVidVac);
        if(idVidVac === '0' || idVidVac === null){
            let nuevoVid = {idVideo:1, src: listaVideosVacio[1]};
        socket.emit('nuevoVideoVacio',nuevoVid);
        }else{
        let auxi = Number(idVidVac);
        console.log(p);
            if(auxi < p ){
            auxi = auxi + 1;
            nuevoVid = {idVideo: auxi, src: listaVideosVacio[auxi]};
            io.emit('nuevoVideoVacio',nuevoVid);
        }else{
            nuevoVid  = {idVideo : 1, src: listaVideosVacio[1]};
        io.emit('nuevoVideoVacio',nuevoVid);
        }
        }
    });



//evento para mostrar videos cuando si haya llamadas ------->
    let listaVideos ={};
    let a = 0;
    let videos = path.join(__dirname,'../../public/videos/');
    fs.readdir(videos,(err,files)=>{
    let i = 0;
    files.forEach(file =>{
       i= i+1;
       a = a +1;
       listaVideos[i] = file;
    });
    });
    socket.off('video',()=>{});
    socket.on('video',(idVid)=>{
        console.log(socket.eventNames());
        function logSocketEvents(){
            const events = socket.eventNames();
            console.log('eventos registrados e conteo de listeners : ');
            events.forEach(evento =>{
            const count = socket.listenerCount(evento);
            console.log(`evento : ${evento} --- listeners: ${count}`);
        });

        }
        logSocketEvents();
        console.log('clientes conectados lleno => ' + io.engine.clientsCount);
        if(idVid === '0'){
            let  nuevoVid = {idVideo : 1 , src: listaVideos[1]};
            io.emit('nuevoVideo',nuevoVid);
        }else{
            let aux = Number(idVid);
        if(aux < a){
            aux = aux + 1;
            nuevoVid = { idVideo : aux, src: listaVideos[aux]};
            io.emit('nuevoVideo',nuevoVid);
            }else{
            nuevoVid = {idVideo:1, src: listaVideos[1]};
            io.emit('nuevoVideo',nuevoVid);
            };
        };
    });




//evento para listar mensajes -------------------------------->
    socket.off('listarMensajes',()=>{});
    socket.on('listarMensajes',async ()=>{
    let mensajes = await pool.query('select * from mensajes');
        console.log(mensajes);
        mensajes = mensajes[0];
    var listaMensajes = ' ';
    var indice = 0;
        if (mensajes.length === 0){
        console.log('entra');
            listaMensajes = 'vacio';
        }else{
        mensajes.forEach(mensaje =>{
                    listaMensajes = (listaMensajes + ' ' + ' -  '  + [mensajes[0].mensaje]);
                indice = indice + 1;
            });
        };
    io.emit('listaMensajes',listaMensajes);
    });



  });

  return router;
};
